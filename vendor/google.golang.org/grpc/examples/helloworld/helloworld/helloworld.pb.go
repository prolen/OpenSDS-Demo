// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	VolumeRequest
	VolumeReply
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type VolumeRequest struct {
	ResoureType string `protobuf:"bytes,1,opt,name=resoureType" json:"resoureType,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Size        int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *VolumeRequest) Reset()                    { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()               {}
func (*VolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VolumeRequest) GetResoureType() string {
	if m != nil {
		return m.ResoureType
	}
	return ""
}

func (m *VolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// The response message containing the greetings
type VolumeReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *VolumeReply) Reset()                    { *m = VolumeReply{} }
func (m *VolumeReply) String() string            { return proto.CompactTextString(m) }
func (*VolumeReply) ProtoMessage()               {}
func (*VolumeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VolumeReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*VolumeRequest)(nil), "helloworld.VolumeRequest")
	proto.RegisterType((*VolumeReply)(nil), "helloworld.VolumeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// const _ = grpc.SupportPackageIsVersion4

// Client API for Greet service

type GreetClient interface {
	// Sends a greeting
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error)
}

type greetClient struct {
	cc *grpc.ClientConn
}

func NewGreetClient(cc *grpc.ClientConn) GreetClient {
	return &greetClient{cc}
}

func (c *greetClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error) {
	out := new(VolumeReply)
	err := grpc.Invoke(ctx, "/helloworld.Greet/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greet service

type GreetServer interface {
	// Sends a greeting
	CreateVolume(context.Context, *VolumeRequest) (*VolumeReply, error)
}

func RegisterGreetServer(s *grpc.Server, srv GreetServer) {
	s.RegisterService(&_Greet_serviceDesc, srv)
}

func _Greet_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greet/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greet",
	HandlerType: (*GreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Greet_CreateVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

// Client API for AgainGreet service

type AgainGreetClient interface {
	// Sends a greeting
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error)
}

type againGreetClient struct {
	cc *grpc.ClientConn
}

func NewAgainGreetClient(cc *grpc.ClientConn) AgainGreetClient {
	return &againGreetClient{cc}
}

func (c *againGreetClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*VolumeReply, error) {
	out := new(VolumeReply)
	err := grpc.Invoke(ctx, "/helloworld.AgainGreet/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgainGreet service

type AgainGreetServer interface {
	// Sends a greeting
	CreateVolume(context.Context, *VolumeRequest) (*VolumeReply, error)
}

func RegisterAgainGreetServer(s *grpc.Server, srv AgainGreetServer) {
	s.RegisterService(&_AgainGreet_serviceDesc, srv)
}

func _AgainGreet_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgainGreetServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.AgainGreet/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgainGreetServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgainGreet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.AgainGreet",
	HandlerType: (*AgainGreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _AgainGreet_CreateVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x45, 0x72, 0xf1, 0x86, 0xe5, 0xe7, 0x94, 0xe6, 0xa6, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x08, 0x29, 0x70, 0x71, 0x17, 0xa5, 0x16, 0xe7, 0x97, 0x16, 0xa5, 0x86, 0x54, 0x16, 0xa4,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x21, 0x0b, 0x09, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6,
	0xa6, 0x4a, 0x30, 0x81, 0xa5, 0xc0, 0x6c, 0x90, 0x58, 0x71, 0x66, 0x55, 0xaa, 0x04, 0x33, 0x50,
	0x8c, 0x35, 0x08, 0xcc, 0x56, 0x52, 0xe7, 0xe2, 0x86, 0x19, 0x5d, 0x90, 0x53, 0x29, 0x24, 0xc1,
	0xc5, 0x9e, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x0e, 0x33, 0x14, 0xc6, 0x35, 0xf2, 0xe5, 0x62, 0x75,
	0x2f, 0x4a, 0x4d, 0x2d, 0x11, 0x72, 0xe1, 0xe2, 0x71, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x85, 0xe8,
	0x13, 0x92, 0xd4, 0x43, 0x72, 0x3b, 0x8a, 0x33, 0xa5, 0xc4, 0xb1, 0x49, 0x01, 0xad, 0x51, 0x62,
	0x30, 0x0a, 0xe2, 0xe2, 0x72, 0x4c, 0x4f, 0xcc, 0xcc, 0xa3, 0xa2, 0x99, 0x4e, 0x06, 0x5c, 0xd2,
	0x99, 0xf9, 0x7a, 0xe9, 0x45, 0x05, 0xc9, 0x7a, 0xa9, 0x15, 0x89, 0xb9, 0x05, 0x39, 0xa9, 0xc5,
	0x48, 0x8a, 0x9d, 0xf8, 0x3d, 0x40, 0xec, 0x70, 0x10, 0x3b, 0x00, 0x14, 0xc4, 0x01, 0x8c, 0x49,
	0x6c, 0xe0, 0xb0, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x4b, 0x13, 0xb3, 0x7f, 0x01,
	0x00, 0x00,
}
